import { useEffect, useState } from 'react';
import {
  Stepper,
  Button,
  Group,
  TextInput,
  PasswordInput,
  Code,
  Alert,
  Box,
  Anchor,
	rem,
} from '@mantine/core';
import { useForm } from '@mantine/form';
import { DateInput } from '@mantine/dates';
import { IconCheck, IconInfoCircle, IconX } from '@tabler/icons-react';
import { APP, APP_MODE } from '@/Share/Variables';
import { notifications } from '@mantine/notifications';
import { Paths } from '@Components/App/Routing/types/Paths';

const Signup = () => {
  const [active, setActive] = useState(0);
  const [birthval, setBirthval] = useState<Date | null>(null);
	const [registrationSuccess, setRegistrationSuccess] = useState(false);

  const form = useForm({
    initialValues: {
      Auth: {
        username: '',
        email: '',
        password: '',
      },
      Personal: {
        name: '',
        surname: '',
        patronymic: '',
        birthday: '',
        phone: '',
      },
      Location: {
        country: '',
        city: '',
      },
      position: '',
    },

    validate: (values) => {
      if (active === 0) {
        return {
          username:
            values.Auth.username.trim().length < 6
              ? 'Username must include at least 6 characters'
              : null,
          password:
            values.Auth.password.length < 6
              ? 'Password must include at least 6 characters'
              : null,
        };
      }

      if (active === 1) {
        return {
          name:
            values.Personal.name.trim().length < 2
              ? 'Name must include at least 2 characters'
              : null,
          email: /^\S+@\S+$/.test(values.Auth.email) ? null : 'Invalid email',
        };
      }

      return {};
    },
  });

  const nextStep = () =>
    setActive((current) => {
      if (form.validate().hasErrors) {
        return current;
      }
      return current < 3 ? current + 1 : current;
    });

  const prevStep = () =>
    setActive((current) => (current > 0 ? current - 1 : current));

  const submitForm = () => {
    fetch('http://localhost:4000/api/signup', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(form.values),
    })
      .then((response) => {
        if (response.status === 409) {
          return response.json().then((data) => {
            notifications.show({
              title: '–û—à–∏–±–∫–∞',
              message: '–¢–∞–∫–æ–π Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ü§•',
              color: 'red',
            });
          });
        } else if (!response.ok) {
          notifications.show({
            title: '–û—à–∏–±–∫–∞',
            message:
              '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...',
            color: 'red',
          });
        } else {
          // notifications.show({
          //   title: '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          //   message: '–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í—ã',
          //   color: 'green',
          // });
					notifications.show({
						loading: true,
						title: '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
						message: '–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥',
						autoClose: false,
						withCloseButton: false,
					});
					setTimeout(() => {
						notifications.update({
							id,
							color: 'teal',
							title: 'Data was loaded',
							message: 'Notification will close in 2 seconds, you can close this notification now',
							icon: <IconCheck style={{ width: rem(18), height: rem(18) }} />,
							loading: false,
							autoClose: 2000,
						});
					}, 3000);
					setRegistrationSuccess(true);
        }
        {
          APP_MODE == 'dev' && response.json();
        }
      })
      .then((data) => {
        // Handle the response from the server
        console.log('Server response:', data);
      })
      .catch((error) => {
        // Handle network errors
        console.error('Error submitting form:', error);
      });
  };

  //@ Dev success callback
  const DevSuccesSugnUP = () => (
    <>
      Completed! Form values:
      <Code block mt='xl'>
        {JSON.stringify(form.values, null, 2)}
      </Code>
    </>
  );
  //@ Production success callback
  const SuccesSugnUP = () => (
    <Box>
      <Alert
        variant='light'
        color='orange'
        title='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        icon={<IconInfoCircle />}
      >
        –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è
        –∑–∞–ø–∏—Å—å –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞
        <Anchor href='/' target='blank'>
          {' '}
          {APP.FULLNAME}
        </Anchor>
      </Alert>
    </Box>
  );

	useEffect(() => {
    if (registrationSuccess) {
      const redirectTimer = setTimeout(() => {
        window.location.href = `${Paths.Login}`;
      }, 5000);

      return () => clearTimeout(redirectTimer);
    }
  }, [registrationSuccess]);

  return (
    <>
      <Stepper active={active} pt={70}>
        <Stepper.Step label='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' description='–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'>
          <TextInput
            label='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            placeholder='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            {...form.getInputProps('Auth.username')}
          />
          <TextInput
            label='Email'
            placeholder='Email'
            {...form.getInputProps('Auth.email')}
          />
          <PasswordInput
            mt='md'
            label='–ü–∞—Ä–æ–ª—å'
            placeholder='–ü–∞—Ä–æ–ª—å'
            {...form.getInputProps('Auth.password')}
          />
        </Stepper.Step>

        <Stepper.Step
          label='–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
          description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
        >
          <TextInput
            label='–ò–º—è'
            placeholder='–ò–º—è'
            {...form.getInputProps('Personal.name')}
          />
          <TextInput
            mt='md'
            label='–§–∞–º–∏–ª–∏—è'
            placeholder='–§–∞–º–∏–ª–∏—è'
            {...form.getInputProps('Personal.surname')}
          />
          <TextInput
            mt='md'
            label='–û—Ç—á–µ—Å—Ç–≤–æ'
            placeholder='–û—Ç—á–µ—Å—Ç–≤–æ'
            {...form.getInputProps('Personal.patronymic')}
          />
          <DateInput
            mt='md'
            value={birthval}
            //@ts-ignore
            onChange={setBirthval}
            label='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
            placeholder='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
            {...form.getInputProps('Personal.birthday')}
          />
        </Stepper.Step>

        <Stepper.Step
          label='–†–∞–±–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
          description='–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ'
        >
          <TextInput
            mt='md'
            label='–î–æ–ª–∂–Ω–æ—Å—Ç—å'
            placeholder='–î–æ–ª–∂–Ω–æ—Å—Ç—å'
            {...form.getInputProps('position')}
          />
          <TextInput
            mt='md'
            label='–¢–µ–ª–µ—Ñ–æ–Ω'
            placeholder='–¢–µ–ª–µ—Ñ–æ–Ω'
            {...form.getInputProps('Personal.phone')}
          />
          <TextInput
            mt='md'
            label='–°—Ç—Ä–∞–Ω–∞'
            placeholder='–°—Ç—Ä–∞–Ω–∞'
            {...form.getInputProps('Location.country')}
          />
          <TextInput
            mt='md'
            label='–ì–æ—Ä–æ–¥'
            placeholder='–ì–æ—Ä–æ–¥'
            {...form.getInputProps('Location.city')}
          />
        </Stepper.Step>
        <Stepper.Completed>
          {SuccesSugnUP()}
          {APP_MODE == 'dev' && DevSuccesSugnUP()}
        </Stepper.Completed>
      </Stepper>
      <Group justify='flex-end' mt='xl'>
        {active !== 0 && (
          <Button variant='default' onClick={prevStep}>
            –ù–∞–∑–∞–¥
          </Button>
        )}
        {active !== 3 ? (
          <Button onClick={nextStep}>–î–∞–ª–µ–µ</Button>
        ) : (
          <Button onClick={submitForm}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Button>
        )}
      </Group>
    </>
  );
};

export default Signup;
