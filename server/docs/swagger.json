{
    "swagger": "2.0",
    "info": {
        "description": "Documentation for Cemetery API server",
        "title": "Cemetery API Documentation",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "mailto:support@cemetery.com",
            "email": "support@cemetery.com"
        },
        "version": "0.2"
    },
    "host": "localhost:4000",
    "basePath": "/",
    "paths": {
        "/api/forgot-password": {
            "post": {
                "description": "Инициирует процесс восстановления пароля пользователя. Отправляет письмо с инструкциями и ссылкой на сброс пароля.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Запрос на восстановление пароля",
                "parameters": [
                    {
                        "description": "Email пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запрос на восстановление пароля отправлен успешно",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/reset-password": {
            "post": {
                "description": "Обновляет пароль пользователя после сброса. Требуется валидный токен сброса пароля.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Сброс пароля",
                "parameters": [
                    {
                        "description": "Данные для сброса пароля",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пароль успешно сброшен",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Токен сброса пароля не найден или устарел",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/content/approved": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение  утвержденного контента",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Получение утвержденного контента",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Контент со статцсом Approved успешно получен",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Контент не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/content/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает контент с указанными параметрами и устанавливает статус \"На рассмотрении\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Создание контента",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Данные для создания контента",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Контент создан успешно",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Контент с таким заголовком уже существует",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/content/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет контент по указанному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Удаление контента",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID контента",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Контент успешно удален",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Контент не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/content/pending": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение контента на рассмотрении",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Получение контента на рассмотрении",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Контент на проверке успешно получен",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Контент не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/content/rejected": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение  утвержденного контента",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Получение утвержденного контента",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Контент со статцсом Rejected успешно получен",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Контент не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/content/update/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Обновляет статус контента по указанному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content"
                ],
                "summary": "Обновление статуса контента",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID контента",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления статуса контента",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateContentStatusRequest"
                        }
                    },
                    {
                        "description": "Статус контента",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Pending",
                                "Approved",
                                "Rejected"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус контента обновлен успешно",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации запроса",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Контент не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/dashboard": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "RolesAuth": []
                    }
                ],
                "description": "Возвращает сообщение \"Dashboard page\"\nПроверка работоспособности middleware AuthMiddleware",
                "tags": [
                    "users"
                ],
                "summary": "Защищенная страница, требующая авторизации и роли \"admin\"",
                "responses": {
                    "200": {
                        "description": "Dashboard page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/time-capsule/create": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Создает капсулу времени для пользователя",
                "tags": [
                    "time-capsule"
                ],
                "summary": "Создание капсулы времени",
                "parameters": [
                    {
                        "description": "Данные для создания капсулы времени",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateTimeCapsuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Time capsule created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create time capsule",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/time-capsules": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Возвращает список капсул времени для пользователя",
                "tags": [
                    "time-capsule"
                ],
                "summary": "Получение списка капсул времени пользователя",
                "responses": {
                    "200": {
                        "description": "Get user's time capsules successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TimeCapsule"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get user's time capsules",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Авторизация пользователя и выдача JWT токена с использованием Cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка авторизации пользователя",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Завершение сеанса пользователя и удаление JWT токена из Cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Выход пользователя (Logout)",
                "responses": {
                    "200": {
                        "description": "Успешный выход",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Регистрирует пользователя с ролью по-умолчанию (user)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно зарегистрирован",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка при регистрации пользователя",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/time-capsule/{id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Возвращает страницу капсулы времени для пользователя",
                "tags": [
                    "time-capsule"
                ],
                "summary": "Получение страницы капсулы времени",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID капсулы времени",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get time capsule page successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get time capsule page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Возвращает список всех пользователей.",
                "tags": [
                    "users"
                ],
                "summary": "Получение всех пользователей",
                "responses": {
                    "200": {
                        "description": "Get all users successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/update-role/{id}": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Обновляет роль пользователя по указанному идентификатору\nРоли: user, support, moderator, admin",
                "tags": [
                    "users"
                ],
                "summary": "Обновление роли пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления роли пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update user role",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Обновляет данные пользователя по указанному идентификатору.",
                "tags": [
                    "users"
                ],
                "summary": "Обновление данных пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Удаляет пользователя по указанному идентификатору.",
                "tags": [
                    "users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Content": {
            "type": "object",
            "required": [
                "category",
                "title"
            ],
            "properties": {
                "category": {
                    "$ref": "#/definitions/models.ContentCategory"
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ContentStatus"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.ContentCategory": {
            "type": "string",
            "enum": [
                "MemoryPage",
                "FamilyTree",
                "Other",
                "TimeCapsule",
                "Letter",
                "VideoMessage"
            ],
            "x-enum-varnames": [
                "MemoryPage",
                "FamilyTree",
                "Other",
                "TimeCapsuleCategory",
                "Letter",
                "VideoMessage"
            ]
        },
        "models.ContentRequest": {
            "type": "object",
            "required": [
                "category",
                "title"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.ContentStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "Approved",
                "Rejected"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusApproved",
                "StatusRejected"
            ]
        },
        "models.CreateTimeCapsuleRequest": {
            "type": "object",
            "required": [
                "category",
                "content",
                "openAt",
                "signature"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "openAt": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "models.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "newPassword",
                "token"
            ],
            "properties": {
                "newPassword": {
                    "type": "string",
                    "minLength": 3
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.TimeCapsule": {
            "type": "object",
            "properties": {
                "attachedFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "category": {
                    "$ref": "#/definitions/models.ContentCategory"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "openAt": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.UpdateContentStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "$ref": "#/definitions/models.ContentStatus"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRoleRequest": {
            "type": "object",
            "required": [
                "newRole"
            ],
            "properties": {
                "newRole": {
                    "type": "string",
                    "enum": [
                        "user",
                        "support",
                        "moderator",
                        "admin"
                    ]
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Content"
                    }
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "timeCapsules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TimeCapsule"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "swagger.AuthRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "swagger.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "swagger.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "CookieAuth": {
            "type": "apiKey",
            "name": "token",
            "in": "cookie"
        }
    }
}