package auth

import (
	"errors"
	"lps/cemetery/models"
	password "lps/cemetery/pkg/Password"
	"lps/cemetery/pkg/jwt"
	"lps/cemetery/pkg/vars"
	"net/http"
	"time"

	"github.com/Avdushin/gogger/logger"

	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

type AuthHandler struct {
	DB *gorm.DB
}

// @Summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é (user)
// @Tags auth
// @Accept json
// @Produce json
// @Request json
// @Param request body swagger.AuthRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"
// @Success 200 {string} string "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
// @Failure 400 {string} string "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Router /api/signup [POST]
func (u *AuthHandler) Register(c *gin.Context) {
	var user models.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ email
	var existingUser models.User
	if err := u.DB.Where("email = ?", user.Auth.Email).First(&existingUser).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "Email already exists"})
		return
	}

	// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	hashedPassword, err := password.HashPassword(user.Auth.Password)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to hash password"})
		return
	}

	user.Auth.Password = hashedPassword
	user.Auth.Role = string(models.SimpleUser)

	// –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
	if user.Auth.Role == "" {
		user.Auth.Role = string(models.SimpleUser)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	u.DB.Create(&user)

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Content –∏ TimeCapsules)
	u.DB.Preload("Content").Preload("TimeCapsules").Find(&user)

	c.JSON(http.StatusCreated, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"})
}

// @Summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ JWT —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Cookie
// @Tags auth
// @Accept json
// @Produce json
// @Request json
// @Param request body swagger.AuthRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"
// @Success 200 {object} swagger.SuccessResponse "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
// @Failure 400 {string} string "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Router /api/login [POST]
func (u *AuthHandler) Login(c *gin.Context) {
	var user models.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	var dbUser models.User
	if err := u.DB.Where("email = ?", user.Auth.Email).First(&dbUser).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to query user"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
	if err := bcrypt.CompareHashAndPassword([]byte(dbUser.Auth.Password), []byte(user.Auth.Password)); err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid credentials"})
		return
	}

	// –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
	_ = u.DB.Model(&dbUser).Preload("Content").Preload("TimeCapsules").Find(&dbUser).Error

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	token, err := jwt.CreateToken(dbUser)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate token"})
		return
	}

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ Cookie
	c.SetCookie("token", token, int((time.Hour * 24 * 30).Seconds()), "/", "", false, false)

	c.JSON(http.StatusOK, gin.H{
		"message": "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
		"token":   token,
	})
}

// @Summary –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Logout)
// @Description –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ Cookie
// @Tags auth
// @Produce json
// @Success 200 {string} string "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"
// @Router /api/logout [GET]
func (u *AuthHandler) Logout(c *gin.Context) {
	c.SetCookie("token", "", -1, "/", "", false, false)
	c.JSON(http.StatusOK, gin.H{"message": "Logout successful"})
}

func CreateAdmin(db *gorm.DB) {
	//? –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	var adminUser models.User
	result := db.Where("role = ?", string(models.Admin)).First(&adminUser)
	if result.Error == nil {
		logger.Info("üïµÔ∏è  Admin user already exists.")
		return
	}

	//@ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	hashedPassword, err := password.HashPassword(vars.ADMIN_PASS)
	if err != nil {
		logger.Error("Failed to hash admin password:", err)
		return
	}

	//@ –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	newAdmin := models.User{
		Auth: models.Auth{
			Email:    vars.ADMIN_EMAIL,
			Role:     string(models.Admin),
			Password: hashedPassword,
		},
	}

	if err := db.Create(&newAdmin).Error; err != nil {
		logger.Error("üî™üïµÔ∏è  Failed to create admin user:", err)
		return
	}

	logger.Debug("üïµÔ∏è  Admin user created successfully...")
}
